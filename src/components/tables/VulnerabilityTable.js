// src/components/tables/VulnerabilityTable.js
import React from 'react';
import { useTheme } from '../../context/ThemeContext';
import { CardTitle } from '../common/Card'; // 1. IMPORT THEME-AWARE TITLE

// Helper function to assign colors based on vulnerability severity (Unchanged)
const getSeverityBadge = (severity) => {
    // ... function content is the same
};

const VulnerabilityTable = ({ vulnerabilities }) => {
    const { theme } = useTheme(); // 2. GET THE CURRENT THEME
    const isCustomTheme = theme === 'custom';

    // 3. CONDITIONALLY SET CLASSES FOR EVERY ELEMENT
    const tableClasses = isCustomTheme
        ? "min-w-full text-sm text-left text-text-primary table-fixed"
        : "min-w-full text-sm text-left text-gray-500 dark:text-gray-400 table-fixed";

    const theadClasses = isCustomTheme
        ? "text-xs text-text-primary uppercase sticky top-0 bg-surface"
        : "text-xs text-gray-700 uppercase dark:text-gray-300 sticky top-0 bg-light-bg dark:bg-dark-bg";
    
    const tbodyClasses = isCustomTheme
        ? "divide-y divide-ui-border"
        : "divide-y divide-gray-200 dark:divide-gray-700";

    const trClasses = isCustomTheme
        ? "hover:bg-accent-muted/50"
        : "hover:bg-black/5 dark:hover:bg-white/5";
    
    const tdIpClasses = isCustomTheme
        ? "px-4 py-4 font-mono" // No color specified, will inherit white text
        : "px-4 py-4 font-mono text-gray-900 dark:text-white";


    return (
        <>
            {/* 4. REPLACE THE OLD H2 WITH THE THEME-AWARE CARDTITLE */}
            <CardTitle>Detected Vulnerabilities</CardTitle>
            
            <div className="h-full overflow-y-auto flex-grow min-h-0">
                <table className={tableClasses}>
                    <thead className={theadClasses}>
                        <tr>
                            <th scope="col" className="px-4 py-3 w-[15%]">Severity</th>
                            <th scope="col" className="px-4 py-3 w-[20%]">Host IP</th>
                            <th scope="col" className="px-4 py-3 w-[10%]">Port</th>
                            <th scope="col" className="px-4 py-3 w-[40%]">Description</th>
                            <th scope="col" className="px-4 py-3 w-[15%]">CVE</th>
                        </tr>
                    </thead>
                    <tbody className={tbodyClasses}>
                        {vulnerabilities && vulnerabilities.length > 0 ? (
                            vulnerabilities.map((vuln, index) => (
                                <tr key={index} className={trClasses}>
                                    <td className="px-4 py-4">
                                        <span className={`px-2 py-1 text-xs font-semibold rounded-md ${getSeverityBadge(vuln.severity)}`}>
                                            {vuln.severity}
                                        </span>
                                    </td>
                                    <td className={tdIpClasses}>{vuln.host_ip}</td>
                                    <td className="px-4 py-4">{vuln.port}</td>
                                    <td className="px-4 py-4 text-xs italic truncate" title={vuln.description}>{vuln.description}</td>
                                    <td className="px-4 py-4 font-mono text-xs truncate" title={vuln.cve}>{vuln.cve}</td>
                                </tr>
                            ))
                        ) : (
                            <tr>
                                <td colSpan="5" className="text-center py-8 text-gray-400">
                                    No vulnerabilities detected yet. Awaiting scan results.
                                </td>
                            </tr>
                        )}
                    </tbody>
                </table>
            </div>
        </>
    );
};

export default VulnerabilityTable;